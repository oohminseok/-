#include <iostream>
#include <queue>
#include <random>
#include <vector>
#include <tuple>
#include <algorithm>

int main() 
{
	std::ios::sync_with_stdio(0);
	std::cout.tie(0);
	std::cin.tie(0);

	while (1)
	{
		int l, r, c;
		std::cin >> l >> r >> c;
		if (l== 0 && r == 0 && c == 0)
		{
			break;
		}

		char board[31][31][31];
		std::queue<std::tuple<int, int, int>> q;
		int dist[31][31][31];
		std::vector<int> h{ 0,0,0,0,1,-1 };
		std::vector<int> x{ 0,0,1,-1,0,0 };
		std::vector<int> y{ 1,-1,0,0,0,0 };

		for (int i = 0; i <l ; ++i)
		{
			for (int j = 0; j < r; ++j)
			{
				std::fill(dist[i][j], dist[i][j] + c, 0);
			}
		}


		for (int i = 0; i < l; ++i)
		{
			for (int j = 0; j < r; ++j)
			{
				for (int k = 0; k < c; ++k)
				{
					std::cin >> board[i][j][k];
					if (board[i][j][k] == 'S')
					{
						q.push({ i,j,k });
						dist[i][j][k] = 0;
					}
					else if (board[i][j][k] == '.')
					{
						dist[i][j][k] = -1;
					}
					
				}
			}
		}


		bool escape = false;
		while (!q.empty())
		{
			if (escape)
			{
				break;
			}
			std::tuple<int, int, int> current = q.front();
			q.pop();
			int ch, cx, cy;
			std::tie(ch, cx, cy) = current;
		
			for (int i = 0; i < x.size(); ++i)
			{
				int fh = ch + h[i];
				int fx = cx + x[i];
				int fy = cy + y[i];

				if (fx < 0 || fx >= r || fy < 0 || fy >= c || fh < 0 || fh >= l)
				{
					continue;
				}
				if (dist[fh][fx][fy]>0 || board[fh][fx][fy] == '#')
				{
					continue;
				}
				dist[fh][fx][fy] = dist[ch][cx][cy] + 1;
				if (board[fh][fx][fy] == 'E')
				{
					std::cout << "Escaped in " << dist[fh][fx][fy] << " minute(s).\n";
					escape = true;
					break;
				}
				q.push({ fh,fx,fy });
			}
		}



		while (!q.empty())
		{
			q.pop();
		}
		if (!escape)
		{
			std::cout << "Trapped!" << '\n';
		}

	}
}
