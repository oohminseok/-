class Solution 
{
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) 
    {
        std::vector<int> dx{-1,1,0,0,-1,-1,1,1};
        std::vector<int> dy{0,0,-1,1,-1,1,-1,1};
        std::queue<std::tuple<int,int,int>> q;
        std::vector<std::vector<int>> visit(grid.size(),std::vector<int>(grid[0].size()));
	    int cx, cy, cl = 0;

        for(int i=0; i<grid.size(); ++i)
        {
            for (int j = 0; j < grid[0].size(); ++j)
		{
			if(grid[0][0]==1)
			{
				return -1;
			}
            else if(grid[grid.size()-1][grid.size()-1]==1)
            {
                return -1;
            }
			visit[i][j] = grid[i][j];
		}
        }
        q.push({ 0,0,1 });
	    visit[0][0] = 1;

        for(int i=0; i<grid.size(); ++i)
        {
            for(int j=0; j<grid.size(); ++j)
            {
                if(grid[i][j] || visit[i][j]>=1)
                {
                    continue;
                }

                while(!q.empty())
                {
                    std::tuple<int,int,int> current=q.front();
                    q.pop();
                    std::tie(cx,cy,cl)=current;
            
                    for(int i=0; i<dx.size(); ++i)
                    {
                        int x=dx[i]+cx;
                        int y=dy[i]+cy;
                        if(x<0||x>=grid.size()||y<0||y>=grid[0].size())
                        {
                            continue;
                        }
                        if(grid[x][y]==1||visit[x][y]>=1)
                        {
                            continue;
                        }
                        q.push({x,y,cl+1});
                        visit[x][y]=cl+1;
                    }
                }
            }
        }
        if(visit[grid.size()-1][grid.size()-1]==0)
        {
            return -1;
        }
        else
        {
            return visit[grid.size()-1][grid.size()-1];
        }
    }
};
