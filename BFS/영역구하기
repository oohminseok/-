#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
int main() 
{
	std::ios::sync_with_stdio(0);
	std::cout.tie(0);
	std::cin.tie(0);

	int m, n, k; 
	std::cin >> m >> n >> k; //모눈종이 너비, 높이, 직사각형 개수

	std::vector<std::vector<int>> board(m, std::vector<int>(n, 0));
	std::vector<std::vector<int>> dist(m, std::vector<int>(n, 1));

	while (k > 0)
	{
		--k;
		int x1, y1, x2, y2;
		std::cin >> x1 >> y1 >> x2 >> y2;


		for (int i = y1; i < y2; ++i)
		{
			for (int j = x1; j < x2; ++j)
			{
				board[i][j] = 1;
				dist[i][j] = -1;
			}
		}
	}

	int count = 0;
	std::vector<int> temp;
	std::vector<int> x{ -1,1,0,0 }; //상하
	std::vector<int> y{ 0,0,-1,1 };//좌우
	for (int i = 0; i < m; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			if (board[i][j]!=0)
			{
				continue;
			}
			std::queue<std::pair<int, int>> q;
			q.push({ i,j });
			board[i][j] = 1;
			++count;
			int width = 0;
			++width;
			while (!q.empty())
			{
				std::pair<int, int> current = q.front();
				q.pop();
	
				for (int i = 0; i < x.size(); ++i)
				{
					int fx = current.first + x[i];
					int fy = current.second + y[i];

					if (fx < 0 || fx >= m || fy < 0 || fy >= n|| board[fx][fy])
					{
						continue;
					}
					++width;
					board[fx][fy] = board[current.first][current.second] + 1;
					q.push({ fx,fy });
				}
			}
			temp.push_back(width);
		}
	}

	std::cout << count << '\n';
	std::sort(temp.begin(), temp.end());
	for (auto e : temp)
	{
		std::cout << e << " ";
	}

}
