#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>

int main() 
{
	std::ios::sync_with_stdio(0);
	std::cout.tie(0);
	std::cin.tie(0);
	
	int t; //테스트 케이스
	std::cin >> t;

	while (t > 0)
	{
		--t;
		int m, n, k; //배추밭의 가로 세로 크기, 배추가 심어져 있는 위치 개수
		std::cin >> m >> n >> k;
		std::vector<std::vector<int>> board(m, std::vector<int>(n, 0));
		std::vector<std::vector<int>> visit(m, std::vector<int>(n, 0));
		std::vector<int> x{ -1,1,0,0 }; //상하
		std::vector<int> y{ 0,0,-1,1 }; //좌우
		std::queue <std::pair<int, int>>q;

		for (int i = 1; i <= k; ++i)
		{
			int x, y;//배추가 심어져 있는 위치
			std::cin >> x >> y;
			board[x][y] = 1;
		}

		int count = 0;

		for (int i = 0; i < m; ++i)
		{
			for (int j = 0; j < n; ++j)
			{
				if (board[i][j] == 0 || visit[i][j]==1)
				{
					continue;
				}
				++count;

				q.push({ i, j });
				visit[i][j] = 1;

				while (!q.empty())
				{
					std::pair<int, int> current = q.front();
					q.pop();
					for (int i = 0; i < x.size(); ++i)
					{
						int fx = current.first + x[i];
						int fy = current.second + y[i];
						if (fx<0 || fx>=m || fy<0 || fy>=n)
						{
							continue;
						}
						if (board[fx][fy] == 0 || visit[fx][fy]==1)
						{
							continue;
						}

						visit[fx][fy] = 1;
						q.push({ fx,fy });
					}
				}
			}
		}
			std::cout << count << '\n';
	}




	
}
