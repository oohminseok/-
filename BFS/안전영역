#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>

int main()
{
	std::ios::sync_with_stdio(0);
	std::cout.tie(0);
	std::cin.tie(0);

	int n;
	std::cin >> n;

	std::vector<std::vector<int>> board(n, std::vector<int>(n, 0));

	std::vector<int> x{ -1,1,0,0 };
	std::vector<int> y{ 0,0,-1,1 };
	std::vector<int>temp1;
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			int n;
			std::cin >> n;
			board[i][j] = n;
			temp1.push_back(n);
		}
	}
	
	std::sort(temp1.begin(), temp1.end());
	int min = 0;
	int max = temp1[temp1.size() - 1];
	std::queue<std::pair<int, int>> q1;
	int count1 = 0;
	std::vector<int> temp;

	while (min <= max)
	{
		std::vector<std::vector<int>> dist(n, std::vector<int>(n, 0));
		for (int i = 0; i < n; ++i)
		{
			for (int j = 0; j < n; ++j)
			{
				if (dist[i][j] || board[i][j] <= min)
				{
					continue;
				}
				q1.push({ i,j });
				dist[i][j] = 1;
				++count1;
				while (!q1.empty())
				{
					std::pair<int, int> current = q1.front();
					q1.pop();
					for (int i = 0; i < x.size(); ++i)
					{
						int fx = current.first + x[i];
						int fy = current.second + y[i];

						if (fx < 0 || fx >= n || fy < 0 || fy >= n)
						{
							continue;
						}
						if (dist[fx][fy] || board[fx][fy] <= min)
						{
							continue;
						}
						dist[fx][fy] = dist[current.first][current.second] + 1;
						q1.push({ fx,fy });
					}
				}
			}
		}
		temp.push_back(count1);
		++min;
		count1 = 0;
	}
	std::sort(temp.begin(), temp.end());
	std::cout << temp[temp.size() - 1];

}
